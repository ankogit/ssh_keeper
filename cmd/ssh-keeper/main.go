package main

import (
	"fmt"
	"os"
	"os/exec"
	"os/signal"
	"path/filepath"
	"strings"
	"syscall"

	"ssh-keeper/internal/config"
	"ssh-keeper/internal/services"
	"ssh-keeper/internal/ui/screens"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
	"github.com/muesli/termenv"
)

// Global services
var (
	connectionService *services.ConnectionService
)

// Build-time variables
var (
	version      string
	appSignature string
)

// restoreTerminal –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª –ø–æ—Å–ª–µ SSH —Å–µ—Å—Å–∏–π
func restoreTerminal() {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
	if !isTerminal(os.Stdin) {
		return
	}

	// –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ tput reset, –ø–æ—Ç–æ–º reset
	cmd := exec.Command("tput", "reset")
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	if err := cmd.Run(); err != nil {
		// Fallback –∫ –æ–±—ã—á–Ω–æ–º—É reset
		cmd = exec.Command("reset")
		cmd.Stdin = os.Stdin
		cmd.Stdout = os.Stdout
		cmd.Stderr = os.Stderr
		if err := cmd.Run(); err != nil {
			// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö
			if isTerminal(os.Stdin) {
				fmt.Printf("Warning: Failed to reset terminal: %v\n", err)
			}
		}
	}
}

// isTerminal –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º
func isTerminal(file *os.File) bool {
	stat, err := file.Stat()
	if err != nil {
		return false
	}
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–∏–º–≤–æ–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ò —á—Ç–æ —ç—Ç–æ –Ω–µ pipe/redirect
	return (stat.Mode()&os.ModeCharDevice) != 0 && file.Name() != "/dev/null"
}

func main() {
	// –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª —á–µ—Ä–µ–∑ reset –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
	restoreTerminal()

	// Set up terminal environment
	lipgloss.SetColorProfile(termenv.ColorProfile())

	// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–µ—Ä–º–∏–Ω–∞–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
	defer restoreTerminal()

	// Set up signal handler to restore terminal on exit
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)
	go func() {
		<-c
		restoreTerminal()
		os.Exit(0)
	}()

	// Initialize services
	if err := initializeServices(); err != nil {
		fmt.Printf("Error initializing services: %v\n", err)
		os.Exit(1)
	}

	// Create app with screen manager
	app := screens.NewApp()

	// Create tea program
	p := tea.NewProgram(app, tea.WithAltScreen())

	// Run the program
	if _, err := p.Run(); err != nil {
		fmt.Printf("Error running application: %v\n", err)
		restoreTerminal()
		os.Exit(1)
	}

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	restoreTerminal()

	// Terminal will be restored by signal handler if needed
}

// initializeServices initializes all application services
func initializeServices() error {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å (–∏–∑ CI build)
	// –≠—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –î–û –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	if appSignature != "" {
		os.Setenv("SECURITY_APP_SIGNATURE", appSignature)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—ç—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç .env —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
	cfg, err := config.Init()
	if err != nil {
		return fmt.Errorf("failed to initialize config: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
	configPath := cfg.GetConfigPath()

	// –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º ~ –≤ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
	if strings.HasPrefix(configPath, "~/") {
		homeDir, err := os.UserHomeDir()
		if err != nil {
			return fmt.Errorf("failed to get user home directory: %w", err)
		}
		configPath = filepath.Join(homeDir, configPath[2:])
	}

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	configDir := filepath.Dir(configPath)
	if err := os.MkdirAll(configDir, 0755); err != nil {
		return fmt.Errorf("failed to create config directory: %w", err)
	}

	// Initialize master password service
	masterPasswordService := services.NewMasterPasswordService()
	services.SetGlobalMasterPasswordService(masterPasswordService)

	// Initialize encryption service
	encryptionService := services.NewEncryptionService(masterPasswordService)
	services.SetGlobalEncryptionService(encryptionService)

	// If master password is already initialized with signature, refresh the encryption key
	if services.IsMasterPasswordInitializedWithSignature() {
		if err := encryptionService.RefreshKey(); err != nil {
			fmt.Printf("Warning: Failed to refresh encryption key: %v\n", err)
		}
	}

	// Initialize connection service
	connectionService = services.NewConnectionService(configPath)

	// Initialize with sample data if no config exists
	if err := connectionService.InitializeWithSampleData(); err != nil {
		return fmt.Errorf("failed to initialize with sample data: %w", err)
	}

	// Set global service
	services.SetGlobalConnectionService(connectionService)

	// // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	// autoUpdateService := services.NewAutoUpdateService(cfg)
	// services.SetGlobalAutoUpdateService(autoUpdateService)

	// // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	// if autoUpdateService.CheckIfUpdateNeeded() {
	// 	go func() {
	// 		updateInfo, err := autoUpdateService.PerformAutoCheck()
	// 		if err != nil {
	// 			fmt.Printf("Auto-update check failed: %v\n", err)
	// 		} else if updateInfo != nil && updateInfo.IsAvailable {
	// 			// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
	// 			// fmt.Printf("üîÑ New version %s is available! Check Settings > Updates to install.\n", updateInfo.Version)
	// 		}
	// 	}()
	// }

	return nil
}

// GetConnectionService returns the global connection service
func GetConnectionService() *services.ConnectionService {
	return connectionService
}
