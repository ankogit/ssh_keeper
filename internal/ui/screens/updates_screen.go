package screens

import (
	"fmt"
	"os"
	"time"

	"ssh-keeper/internal/services"
	"ssh-keeper/internal/ui"
	"ssh-keeper/internal/ui/components"
	"ssh-keeper/internal/ui/styles"

	"github.com/charmbracelet/bubbles/list"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

// updateCheckMsg —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
type updateCheckMsg struct {
	updateInfo *services.UpdateInfo
	err        error
}

// updateDownloadMsg —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
type updateDownloadMsg struct {
	err error
}

// UpdatesScreen –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —ç–∫—Ä–∞–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
type UpdatesScreen struct {
	*BaseScreen
	list           list.Model
	menuItems      []ui.MenuItem
	config         ui.MenuConfig
	messageManager *components.MessageManager
	updateService  *services.UpdateService
	updateInfo     *services.UpdateInfo
	isChecking     bool
	isDownloading  bool
}

// NewUpdatesScreen —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫—Ä–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
func NewUpdatesScreen() *UpdatesScreen {
	baseScreen := NewBaseScreen("SSH Keeper - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è")
	messageManager := components.NewMessageManager()

	// –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	autoUpdateService := services.GetGlobalAutoUpdateService()
	var updateService *services.UpdateService
	if autoUpdateService != nil {
		updateService = autoUpdateService.GetUpdateService()
	} else {
		// Fallback –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
		version := os.Getenv("APP_VERSION")
		if version == "" {
			version = "0.1.0"
		}
		updateService = services.NewUpdateService(version)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–µ–Ω—é —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
	config := ui.MenuConfig{
		Title: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏",
		Items: []ui.MenuItemConfig{
			{
				Title:       "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
				Description: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π",
				Shortcut:    "1",
				Action: func() tea.Cmd {
					return func() tea.Msg {
						updateInfo, err := updateService.CheckForUpdates()
						return updateCheckMsg{updateInfo: updateInfo, err: err}
					}
				},
			},
			{
				Title:       "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
				Description: "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
				Shortcut:    "2",
				Action: func() tea.Cmd {
					// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ updateMenuItems
					return nil
				},
			},
			{
				Title:       "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
				Description: "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
				Shortcut:    "3",
				Action: func() tea.Cmd {
					// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
					return components.AddMessageCmd(components.NewMessage(components.MessageTypeInfo, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏"))
				},
			},
			{
				Title:       "–ù–∞–∑–∞–¥",
				Description: "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
				Shortcut:    "esc",
				Action: func() tea.Cmd {
					return ui.GoBackCmd()
				},
			},
		},
		ShowBack: true,
		ShowQuit: true,
	}

	// –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
	menuItems := make([]ui.MenuItem, len(config.Items))
	for i, itemConfig := range config.Items {
		menuItems[i] = ui.NewMenuItem(itemConfig)
	}

	// –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫
	l := list.New(convertToListItem(menuItems), list.NewDefaultDelegate(), 0, 0)
	l.SetShowTitle(false)
	l.SetShowStatusBar(false)
	l.SetFilteringEnabled(false)
	l.SetShowHelp(false)
	l.SetShowPagination(false)

	// –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–ª–∞–≤–∏—à–∏ 'q' –≤ —Å–ø–∏—Å–∫–µ
	l.KeyMap.Quit.SetKeys("ctrl+q")

	l.Styles.PaginationStyle = lipgloss.NewStyle().
		Margin(styles.ListPaginationMargin, 0, 0, 0)

	return &UpdatesScreen{
		BaseScreen:     baseScreen,
		list:           l,
		config:         config,
		menuItems:      menuItems,
		messageManager: messageManager,
		updateService:  updateService,
	}
}

// Update –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
func (us *UpdatesScreen) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	var cmd tea.Cmd

	switch msg := msg.(type) {
	case tea.WindowSizeMsg:
		us.SetSize(msg.Width, msg.Height)
		// –£—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Ä–∞–º–∫–∏, –æ—Ç—Å—Ç—É–ø—ã
		us.list.SetSize(msg.Width-4, msg.Height-12)
		return us, nil

	case updateCheckMsg:
		us.isChecking = false
		if msg.err != nil {
			us.messageManager.AddError(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %v", msg.err))
		} else {
			us.updateInfo = msg.updateInfo
			if msg.updateInfo.IsAvailable {
				us.messageManager.AddSuccess(fmt.Sprintf("–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –≤–µ—Ä—Å–∏–∏ %s", msg.updateInfo.Version))
				us.updateMenuItems()
			} else {
				us.messageManager.AddInfo("–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è")
			}
		}
		return us, nil

	case updateDownloadMsg:
		us.isDownloading = false
		if msg.err != nil {
			us.messageManager.AddError(fmt.Sprintf("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %v", msg.err))
		} else {
			us.messageManager.AddSuccess("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ.")
			// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
			return us, tea.Sequence(
				func() tea.Msg {
					time.Sleep(2 * time.Second)
					return tea.Quit
				},
			)
		}
		return us, nil

	case components.MessageCmd:
		// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ MessageManager
		us.messageManager.AddMessage(msg.Message)
		return us, nil

	case tea.KeyMsg:
		switch msg.String() {
		case "ctrl+c", "ctrl+q":
			return us, tea.Quit
		case "esc":
			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
			return us, func() tea.Msg {
				return ui.NavigateToMsg{ScreenName: "settings"}
			}
		case "enter":
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞
			selectedItem := us.list.SelectedItem()
			if item, ok := selectedItem.(ui.MenuItem); ok {
				// –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
				actionCmd := item.Execute()
				if actionCmd != nil {
					cmd = actionCmd
				}
			}
		default:
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
			for _, menuItem := range us.menuItems {
				if menuItem.GetShortcut() == msg.String() {
					// –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
					actionCmd := menuItem.Execute()
					if actionCmd != nil {
						cmd = actionCmd
					}
					break
				}
			}
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
	var listCmd tea.Cmd
	us.list, listCmd = us.list.Update(msg)
	if listCmd != nil {
		cmd = listCmd
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π —ç–∫—Ä–∞–Ω
	baseScreen, baseCmd := us.BaseScreen.Update(msg)
	us.BaseScreen = baseScreen.(*BaseScreen)
	if baseCmd != nil {
		cmd = baseCmd
	}

	return us, cmd
}

// updateMenuItems –æ–±–Ω–æ–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
func (us *UpdatesScreen) updateMenuItems() {
	// –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	if us.updateInfo != nil && us.updateInfo.IsAvailable {
		us.config.Items[1].Description = fmt.Sprintf("–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–µ—Ä—Å–∏—é %s (%.1f MB)",
			us.updateInfo.Version, float64(us.updateInfo.Size)/(1024*1024))

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		us.config.Items[1].Action = func() tea.Cmd {
			return func() tea.Msg {
				err := us.updateService.DownloadAndInstallUpdate(us.updateInfo)
				return updateDownloadMsg{err: err}
			}
		}
	} else {
		us.config.Items[1].Description = "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
		us.config.Items[1].Action = func() tea.Cmd {
			return components.AddMessageCmd(components.NewMessage(components.MessageTypeWarning, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"))
		}
	}

	// –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é
	us.menuItems = make([]ui.MenuItem, len(us.config.Items))
	for i, itemConfig := range us.config.Items {
		us.menuItems[i] = ui.NewMenuItem(itemConfig)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
	items := make([]list.Item, len(us.menuItems))
	for i, item := range us.menuItems {
		items[i] = item
	}
	us.list.SetItems(items)
}

// View –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
func (us *UpdatesScreen) View() string {
	us.updateContent()
	return us.BaseScreen.View()
}

// updateContent –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–∫—Ä–∞–Ω–∞
func (us *UpdatesScreen) updateContent() {
	// –†–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏—Å–æ–∫
	listContent := us.list.View()

	// –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏
	headerStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color(styles.ColorPrimary)).
		Bold(true).
		Margin(0, 0, 1, 0)

	// –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
	header := headerStyle.Render("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
	var updateInfo string
	if us.updateInfo != nil && us.updateInfo.IsAvailable {
		updateInfo = lipgloss.NewStyle().
			Foreground(lipgloss.Color(styles.ColorSuccess)).
			Bold(true).
			Margin(0, 0, 1, 0).
			Render(fmt.Sprintf("üîÑ –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –≤–µ—Ä—Å–∏–∏ %s", us.updateInfo.Version))
	} else if us.updateInfo != nil && !us.updateInfo.IsAvailable {
		updateInfo = lipgloss.NewStyle().
			Foreground(lipgloss.Color(styles.ColorSuccess)).
			Margin(0, 0, 1, 0).
			Render("‚úÖ –£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è")
	}

	// –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è
	messagesContent := us.messageManager.RenderMessages(80)

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
	var content string
	if updateInfo != "" {
		if messagesContent != "" {
			content = lipgloss.JoinVertical(lipgloss.Left, header, updateInfo, messagesContent, listContent)
		} else {
			content = lipgloss.JoinVertical(lipgloss.Left, header, updateInfo, listContent)
		}
	} else {
		if messagesContent != "" {
			content = lipgloss.JoinVertical(lipgloss.Left, header, messagesContent, listContent)
		} else {
			content = lipgloss.JoinVertical(lipgloss.Left, header, listContent)
		}
	}

	us.SetContent(content)
}

// Init –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω
func (us *UpdatesScreen) Init() tea.Cmd {
	return nil
}

// GetName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —ç–∫—Ä–∞–Ω–∞
func (us *UpdatesScreen) GetName() string {
	return "updates"
}
