package components

import (
	"fmt"
	"ssh-keeper/internal/models"
	"ssh-keeper/internal/ui/styles"

	"github.com/charmbracelet/lipgloss"
)

// ConnectionItem –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞
type ConnectionItem struct {
	Connection models.Connection
}

// NewConnectionItem —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
func NewConnectionItem(conn models.Connection) ConnectionItem {
	return ConnectionItem{
		Connection: conn,
	}
}

// Title –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–∞
func (ci ConnectionItem) Title() string {
	return ci.Connection.Name
}

// Description –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ (–∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ)
func (ci ConnectionItem) Description() string {
	// –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
	hostInfo := fmt.Sprintf("%s:%d", ci.Connection.Host, ci.Connection.Port)
	userInfo := ci.Connection.User

	// –¢–∏–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –∏–∫–æ–Ω–∫–∞)
	var authIcon string
	if ci.Connection.KeyPath != "" {
		authIcon = "üîë"
	} else if ci.Connection.HasPassword {
		authIcon = "üîí"
	} else {
		authIcon = "‚ùì"
	}

	return fmt.Sprintf("%s | %s | %s", hostInfo, userInfo, authIcon)
}

// FilterValue –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
func (ci ConnectionItem) FilterValue() string {
	// –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, —Ö–æ—Å—Ç—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	return fmt.Sprintf("%s %s %s",
		ci.Connection.Name,
		ci.Connection.Host,
		ci.Connection.User)
}

// GetConnection –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
func (ci ConnectionItem) GetConnection() models.Connection {
	return ci.Connection
}

// RenderCustomItem —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
func (ci ConnectionItem) RenderCustomItem() string {
	// –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç–µ–π
	nameStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color(styles.ColorSecondary)).
		Bold(styles.TextBold)

	hostStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color(styles.ColorText))

	userStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color(styles.ColorMuted))

	authStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color(styles.ColorSecondary))

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç–∏
	name := nameStyle.Render(ci.Connection.Name)
	host := hostStyle.Render(fmt.Sprintf("(%s:%d)", ci.Connection.Host, ci.Connection.Port))
	user := userStyle.Render(fmt.Sprintf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s", ci.Connection.User))

	var auth string
	if ci.Connection.KeyPath != "" {
		auth = authStyle.Render("üîë –∫–ª—é—á")
	} else if ci.Connection.HasPassword {
		auth = authStyle.Render("üîí –ø–∞—Ä–æ–ª—å")
	} else {
		auth = authStyle.Render("‚ùì –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
	}

	return fmt.Sprintf("%s %s | %s | %s", name, host, user, auth)
}
