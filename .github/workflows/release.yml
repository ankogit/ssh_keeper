name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: true
        default: "v0.1.0"

env:
  GO_VERSION: "1.24"
  BINARY_NAME: "ssh-keeper"

jobs:
  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            goos: linux
            goarch: amd64
            artifact_name: linux-amd64
            artifact_ext: tar.gz
          - os: macos-latest
            arch: amd64
            goos: darwin
            goarch: amd64
            artifact_name: darwin-amd64
            artifact_ext: tar.gz
          - os: macos-latest
            arch: arm64
            goos: darwin
            goarch: arm64
            artifact_name: darwin-arm64
            artifact_ext: tar.gz
          - os: windows-latest
            arch: amd64
            goos: windows
            goarch: amd64
            artifact_name: windows-amd64
            artifact_ext: zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get version
        id: version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          echo "version_clean=$(echo ${GITHUB_REF#refs/tags/} | sed 's/^v//')" >> $GITHUB_OUTPUT

      # - name: Create production .env
      #   run: |
      #     cat > .env << EOF
      #     DEBUG=false
      #     ENV=production
      #     CONFIG_PATH=~/.ssh-keeper/config
      #     APP_SIGNATURE=ssh-keeper-sig-prod-${{ steps.version.outputs.version_clean }}
      #     SSH_CONFIG_PATH=~/.ssh/config
      #     APP_NAME=ssh-keeper
      #     APP_VERSION=${{ steps.version.outputs.version_clean }}
      #     APP_DESCRIPTION=SSH Connection Manager
      #     LOG_LEVEL=info
      #     LOG_FORMAT=text
      #     EOF

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Update vendor directory
        run: go mod vendor

      - name: Build binary
        shell: bash
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build \
            -ldflags "-X main.version=${{ steps.version.outputs.version_clean }}" \
            -o ${{ env.BINARY_NAME }}-${{ matrix.artifact_name }} \
            ./cmd/ssh-keeper

      - name: Create archive
        shell: bash
        run: |
          if [ "${{ matrix.goos }}" = "windows" ]; then
            powershell "Compress-Archive -Path '${{ env.BINARY_NAME }}-${{ matrix.artifact_name }}.exe' -DestinationPath '${{ env.BINARY_NAME }}-${{ steps.version.outputs.version_clean }}-${{ matrix.artifact_name }}.${{ matrix.artifact_ext }}'"
          else
            tar -czf ${{ env.BINARY_NAME }}-${{ steps.version.outputs.version_clean }}-${{ matrix.artifact_name }}.${{ matrix.artifact_ext }} ${{ env.BINARY_NAME }}-${{ matrix.artifact_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ steps.version.outputs.version_clean }}-${{ matrix.artifact_name }}
          path: ${{ env.BINARY_NAME }}-${{ steps.version.outputs.version_clean }}-${{ matrix.artifact_name }}.${{ matrix.artifact_ext }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          echo "version_clean=$(echo ${GITHUB_REF#refs/tags/} | sed 's/^v//')" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find ./artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
            cp "$file" ./release-assets/
          done

      - name: Generate release notes
        run: |
          cat > release-notes.md << 'EOF'
          ## 🎉 SSH Keeper ${{ steps.version.outputs.version_clean }} Release

          ### ✨ What's New
          - 🎨 **Beautiful TUI Interface** - Modern terminal user interface built with Bubble Tea
          - 🔐 **Secure Password Storage** - Master password with system keyring integration
          - 🔑 **Dual Authentication** - Support for both password and SSH key authentication
          - 📁 **Connection Management** - Add, edit, delete, and organize SSH connections
          - 🔍 **Smart Search** - Quick connection search and filtering
          - 📤 **Export/Import** - Full compatibility with OpenSSH config format

          ### 🚀 Installation

          **One-line installation:**
          ```bash
          curl -fsSL https://raw.githubusercontent.com/ankogit/ssh_keeper/main/scripts/install.sh | bash
          ```

          **Windows (PowerShell):**
          ```powershell
          iwr -useb https://raw.githubusercontent.com/ankogit/ssh_keeper/main/scripts/install.ps1 | iex
          ```

          ### 📦 Downloads

          - **macOS Intel**: `ssh-keeper-${{ steps.version.outputs.version_clean }}-darwin-amd64.tar.gz`
          - **macOS Apple Silicon**: `ssh-keeper-${{ steps.version.outputs.version_clean }}-darwin-arm64.tar.gz`
          - **Linux**: `ssh-keeper-${{ steps.version.outputs.version_clean }}-linux-amd64.tar.gz`
          - **Windows**: `ssh-keeper-${{ steps.version.outputs.version_clean }}-windows-amd64.zip`

          ### 🔒 Security Features
          - All data encrypted with AES-256
          - Master password stored in system keyring
          - No sensitive data in plain text
          - Memory cleared after use
          - Open source for security audit

          ### 📄 License
          MIT License - see [LICENSE](LICENSE) file for details

          ---
          **Download now and start managing your SSH connections with style! 🚀**
          EOF

      # - name: Create Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     tag_name: ${{ steps.version.outputs.version }}
      #     name: SSH Keeper ${{ steps.version.outputs.version_clean }}
      #     body_path: release-notes.md
      #     files: ./release-assets/*
      #     draft: false
      #     prerelease: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # test:
  #   name: Run Tests
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: ${{ env.GO_VERSION }}

  #     # - name: Create test .env
  #     #   run: |
  #     #     cat > .env << EOF
  #     #     DEBUG=true
  #     #     ENV=development
  #     #     CONFIG_PATH=~/.ssh-keeper/config
  #     #     APP_SIGNATURE=ssh-keeper-sig-test
  #     #     SSH_CONFIG_PATH=~/.ssh/config
  #     #     APP_NAME=ssh-keeper
  #     #     APP_VERSION=test
  #     #     APP_DESCRIPTION=SSH Connection Manager
  #     #     LOG_LEVEL=debug
  #     #     LOG_FORMAT=text
  #     #     EOF

  #     - name: Run tests
  #       run: go test -v ./...

  #     - name: Run tests with coverage
  #       run: |
  #         go test -v -coverprofile=coverage.out ./...
  #         go tool cover -html=coverage.out -o coverage.html

  #     - name: Upload coverage
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: coverage-report
  #         path: coverage.html

  # lint:
  #   name: Lint Code
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: ${{ env.GO_VERSION }}

  #     - name: Run golangci-lint
  #       uses: golangci/golangci-lint-action@v3
  #       with:
  #         version: latest
  #         args: --timeout=5m
