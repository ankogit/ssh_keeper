name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.24"

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Create test .env
        run: |
          cat > .env << EOF
          DEBUG=true
          ENV=development
          CONFIG_PATH=~/.ssh-keeper/config
          APP_SIGNATURE=ssh-keeper-sig-test
          SSH_CONFIG_PATH=~/.ssh/config
          APP_NAME=ssh-keeper
          APP_VERSION=test
          APP_DESCRIPTION=SSH Connection Manager
          LOG_LEVEL=debug
          LOG_FORMAT=text
          EOF

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Update vendor directory
        run: go mod vendor

      - name: Run tests
        run: go test -v ./...

      - name: Build
        run: go build -o ssh-keeper ./cmd/ssh-keeper

  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: ${{ env.GO_VERSION }}

  #     - name: Download dependencies
  #       run: go mod download

  #     - name: Update vendor directory
  #       run: go mod vendor

  #     - name: Run golangci-lint
  #       uses: golangci/golangci-lint-action@v3
  #       with:
  #         version: latest
  #         args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Update vendor directory
        run: go mod vendor

      - name: Run Gosec Security Scanner
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          ~/go/bin/gosec -fmt sarif -out gosec.sarif ./...

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gosec.sarif

  build-check:
    name: Build Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Create production .env
        run: |
          cat > .env << EOF
          DEBUG=false
          ENV=production
          CONFIG_PATH=~/.ssh-keeper/config
          APP_SIGNATURE=ssh-keeper-sig-prod-test
          SSH_CONFIG_PATH=~/.ssh/config
          APP_NAME=ssh-keeper
          APP_VERSION=test
          APP_DESCRIPTION=SSH Connection Manager
          LOG_LEVEL=info
          LOG_FORMAT=text
          EOF

      - name: Download dependencies
        run: go mod download

      - name: Update vendor directory
        run: go mod vendor

      - name: Test build for all platforms
        run: |
          # Linux
          GOOS=linux GOARCH=amd64 go build -o ssh-keeper-linux-amd64 ./cmd/ssh-keeper

          # macOS Intel
          GOOS=darwin GOARCH=amd64 go build -o ssh-keeper-darwin-amd64 ./cmd/ssh-keeper

          # macOS Apple Silicon
          GOOS=darwin GOARCH=arm64 go build -o ssh-keeper-darwin-arm64 ./cmd/ssh-keeper

          # Windows
          GOOS=windows GOARCH=amd64 go build -o ssh-keeper-windows-amd64.exe ./cmd/ssh-keeper

      - name: Verify binaries
        run: |
          file ssh-keeper-linux-amd64
          file ssh-keeper-darwin-amd64
          file ssh-keeper-darwin-arm64
          file ssh-keeper-windows-amd64.exe
